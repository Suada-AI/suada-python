# coding: utf-8

"""
    Suada API

    OpenAPI specification for the Suada API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.completion_result import CompletionResult

class TestCompletionResult(unittest.TestCase):
    """CompletionResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CompletionResult:
        """Test CompletionResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CompletionResult`
        """
        model = CompletionResult()
        if include_optional:
            return CompletionResult(
                id = 'chatcmpl-123',
                object = 'chat.completion',
                created = 1677652288,
                model = 'suada-v1',
                system_fingerprint = 'fp_44709d6fcb',
                choices = [
                    openapi_client.models.completion_result_choices_inner.CompletionResult_choices_inner(
                        index = 0, 
                        message = openapi_client.models.completion_result_choices_inner_message.CompletionResult_choices_inner_message(
                            role = 'assistant', 
                            content = 'Hello, how can I help you today?', ), 
                        logprobs = null, 
                        finish_reason = 'stop', )
                    ],
                usage = openapi_client.models.completion_result_usage.CompletionResult_usage(
                    prompt_tokens = 9, 
                    completion_tokens = 12, 
                    total_tokens = 21, )
            )
        else:
            return CompletionResult(
        )
        """

    def testCompletionResult(self):
        """Test CompletionResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
